name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
  
env:
  IMAGE_NAME: SPRINGBOOTDEMO
  DOCKER_REPOSITORY: junior
  # If Docker registry not ghcr.io (e.g. iad.ocir.io), is necessary to create
  # secrets DOCKER_USERNAME and DOCKER_PASSWORD with the 
  # Docker Registry credentials
  DOCKER_REGISTRY_URL: ghcr.io

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
            docker image build . --file Dockerfile

  push:
    needs: test
    
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - name: Build image
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[A-Z]' '[a-z]')
          docker image build --pull --no-cache . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into ghcr.io registry
        if: ${{ $DOCKER_REGISTRY_URL == 'ghcr.io' }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
      - name: Log into Docker registry
        if: ${{ $DOCKER_REGISTRY_URL != 'ghcr.io' }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login $DOCKER_REGISTRY_URL -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$DOCKER_REGISTRY_URL/$DOCKER_REPOSITORY/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          SEMREG='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
          SEM=`echo $VERSION | sed -e "s#^v##"`
          TAGS=$SEM
          MAJOR=`echo $SEM | sed -e "s#$SEMREG#\1#"`
          MINOR=`echo $SEM | sed -e "s#$SEMREG#\2#"`
          PATCH=`echo $SEM | sed -e "s#$SEMREG#\3#"`
          SPECIAL=`echo $SEM | sed -e "s#$SEMREG#\4#"`
          # add semantic tags
          if [ "$MAJOR" != "$SEM" ] && [ -z "$SPECIAL" ]; then
              TAGS="latest $SEM $MAJOR.$MINOR $MAJOR"
              if [ -n "$SPECIAL" ]; then
                  TAGS="$MAJOR.$MINOR.$PATCH $TAGS"
              fi
          fi

          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[A-Z]' '[a-z]')
          
          for tag in $TAGS; do
            echo -e "\nTagging and pushing: ${IMAGE_ID}:${tag}"
            docker image tag $IMAGE_NAME $IMAGE_ID:$tag
          done
          
          docker image push --all-tags $IMAGE_ID
    
